# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BG1zgg_x9FhEyoEoUsJk2BAyYKKTFuUt
"""

from flask import Flask,request # Import flask usage and request handling
from pymessenger.bot import Bot # Import bot handling
import os # Import handler for Heroku access tokens
from model import ChatbotInputHandling # Import defined class

app = Flask(__name__)# Create flask object
ACCESS_TOKEN = os.environ['ACCESS_TOKEN'] # Sets access token to herokus own, avoids unsecure storage
VERIFY_TOKEN = os.environ['VERIFY_TOKEN'] # Sets verify token to herokus own
bot = Bot (ACCESS_TOKEN) # Uses access token for boss

@app.route("/", methods=['GET', 'POST']) # Used to recieve and send messages
def receive_message(): # Function called upon recieving message
    if request.method == 'GET': # Before message function begins, get funciton to initially verify facebook token
        token_sent = request.args.get("hub.verify_token") # Verifies token with facebook
        return verify_fb_token(token_sent)
    else: # If not get function, must be post for messages
        output = request.get_json() # Gets the pages output
        for event in output['entry']: # For every event occuring on the messenger
            messaging = event['messaging'] # For every messaging
            for message in messaging: # For every message in the set
                if message.get('message'): # If the message is recieved
                    recipient_id = message['sender']['id'] # Stores recipient id for sending back to, only temporary and not confidential
                    if message['message'].get('text'): # If the message sent to the bot is text
                        message_text = message['message'].get('text') # Gets the text sent
                        response_sent_text = get_message(message_text) # Calls function to get response, passing sent message and storing response
                        send_message(recipient_id, response_sent_text) # Sends response using funcition
                    if message['message'].get('attachments'): # if user send us a GIF, photo, video or any other non-text item
                        send_message(recipient_id, "Sorry, this chatbot currently only handles text.") # Warn user that the chatbot only handles text to handle the error
    return "Message Processed" # Return message processed message to log to show that a message has been processed

def verify_fb_token(token_sent): # Funciton to verify function
    if token_sent == VERIFY_TOKEN: # If token matches
        return request.args.get("hub.challenge") # Return allowance of use
    return 'Invalid verification token' # Otherwise print message describing issue

def get_message(message_text): # Function to get response with passed parameter
	return ChatbotInputHandling.ChatbotInputHandling(message_text) # Returns function from chatbot input handling class, passing input from messenger app

def send_message(recipient_id, response): # Uses py messeenger to send back
    bot.send_text_message(recipient_id, response) # Calls the bot function to respond
    return "success" # Sends success note to log

if __name__ == "__main__": # Verifies that app is running on main
    app.run() # Then runs the app